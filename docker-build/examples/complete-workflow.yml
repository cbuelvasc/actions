name: Complete CI/CD Pipeline with Docker

on:
  push:
    branches: [main, develop]
    tags: ['v*']
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Run tests
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        java-version: [17, 21]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Spring Boot Test Suite
      uses: your-org/actions/spring-boot-test-suite@main
      with:
        build-tool: 'maven'
        java-version: ${{ matrix.java-version }}
        coverage-enabled: 'true'
        coverage-threshold: '80'
        integration-tests: 'true'
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-java-${{ matrix.java-version }}
        path: |
          target/surefire-reports/
          target/site/jacoco/

  # Job 2: Build Docker image (only on main branch and tags)
  docker-build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    
    permissions:
      contents: read
      packages: write
    
    outputs:
      image-digest: ${{ steps.docker-build.outputs.image-digest }}
      image-full-name: ${{ steps.docker-build.outputs.image-full-name }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Generate image metadata
      id: meta
      run: |
        # Generate image tag based on branch/tag
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          # For tags, use the tag name
          IMAGE_TAG=${GITHUB_REF#refs/tags/}
        elif [[ $GITHUB_REF == refs/heads/main ]]; then
          # For main branch, use 'latest' and commit SHA
          IMAGE_TAG="latest"
        else
          # For other branches, use branch name and commit SHA
          IMAGE_TAG=${GITHUB_REF#refs/heads/}-${GITHUB_SHA::8}
        fi
        
        echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "🏷️ Image tag: $IMAGE_TAG"
    
    - name: Build and Push Docker Image
      id: docker-build
      uses: your-org/actions/docker-build@main
      with:
        build-tool: 'maven'
        image-name: ${{ env.IMAGE_NAME }}
        image-tag: ${{ steps.meta.outputs.image-tag }}
        platforms: 'linux/amd64,linux/arm64'
        push: 'true'
        registry-url: ${{ env.REGISTRY }}
        registry-username: ${{ github.actor }}
        registry-password: ${{ secrets.GITHUB_TOKEN }}
        build-args: |
          BUILD_VERSION=${{ steps.meta.outputs.image-tag }}
          BUILD_DATE=${{ github.event.head_commit.timestamp }}
          VCS_REF=${{ github.sha }}
        spring-profiles: 'prod,docker'

  # Job 3: Security scan (only for main branch and tags)
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    
    permissions:
      security-events: write
    
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.docker-build.outputs.image-full-name }}
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Job 4: Deploy to staging (only for main branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker-build, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Deploy to staging
      run: |
        echo "🚀 Deploying to staging environment"
        echo "Image: ${{ needs.docker-build.outputs.image-full-name }}"
        echo "Digest: ${{ needs.docker-build.outputs.image-digest }}"
        
        # Here you would add your actual deployment logic
        # Examples:
        # - Update Kubernetes deployment
        # - Deploy to Cloud Run, ECS, etc.
        # - Update Docker Compose file
        
        echo "✅ Deployment to staging completed"

  # Job 5: Deploy to production (only for tags)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker-build, security-scan]
    if: startsWith(github.ref, 'refs/tags/')
    environment: production
    
    steps:
    - name: Deploy to production
      run: |
        echo "🚀 Deploying to production environment"
        echo "Image: ${{ needs.docker-build.outputs.image-full-name }}"
        echo "Digest: ${{ needs.docker-build.outputs.image-digest }}"
        echo "Tag: ${GITHUB_REF#refs/tags/}"
        
        # Here you would add your actual deployment logic
        # Examples:
        # - Update Kubernetes deployment
        # - Deploy to Cloud Run, ECS, etc.
        # - Update Docker Compose file
        
        echo "✅ Deployment to production completed"

  # Job 6: Notify (runs always at the end)
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test, docker-build, deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Tests | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Docker Build | ${{ needs.docker-build.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Staging Deploy | ${{ needs.deploy-staging.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Production Deploy | ${{ needs.deploy-production.result }} |" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.docker-build.result }}" == "success" ]]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🐳 Docker Image Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: ${{ needs.docker-build.outputs.image-full-name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Digest**: ${{ needs.docker-build.outputs.image-digest }}" >> $GITHUB_STEP_SUMMARY
        fi 